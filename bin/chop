#!/bin/bash

if [ -n "$DEBUG" ]; then set -x; set -e; fi

print_usage() {
    2>&1 cat <<EOF
Usage: $0 [-H|--headers] <fields>
  -H|--header             request headers be maintained in the output (default omitted where possible)
  -d|--delimiter <CHR>    custom character to use as a delimiter
EOF
}

if [[ $# -eq 0 ]]; then
    print_usage
    exit 0
fi

headerFlag=false
customDelim=
args=()
# Parse through command args to override values
while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        print_usage
        exit 0
        ;;
    -H|--header|--headers)
        headerFlag=true
        ;;
    -d|--delimiter)
        customDelim="$2"
        shift
        ;;
    *)
        args+=("$1")
        ;;
    esac
    shift
done

# true if the arguments passed in all look like indexes (not field names)
indexArgs=false
if echo ${args[*]} | grep -q '^[0-9, -]*$'; then
    indexArgs=true
fi

commaArgs="$(echo "${args[*]}" | tr ' ' ',')"
spaceArgs="$(echo "${args[*]}" | tr ',' ' ')"

# read the first line in order to detect the type of log
IFS= read -r LINE

# perform regex match on first line
match() {
    [[ $LINE =~ $1 ]]
}

# pass through original stdin to stdout
stdin() {
    (printf "%s\n" "$LINE"; cat)
}

# default to including headers / first row in output
zeek_cut="zeek-cut -c"  # include full zeek headers
conditionalHeader="cat" # xsv includes headers by default

if ! $headerFlag; then
    # assume the input has a header row if the arguments are field names
    if ! $indexArgs; then
        # only in the case where we're reasonably sure there is a header row
        # and the user did not specify the header flag can we omit the headers
        zeek_cut="zeek-cut"            # don't include zeek headers
        conditionalHeader="tail -n +2" # omit first row (header)
    fi
fi

# custom delimiter
if [[ -n $customDelim ]]; then
    stdin | xsv select -d "$customDelim" $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
# zeek tsv
elif match '^#'; then
    if $indexArgs; then
        # convert to straight TSV if index arguments were provided
        if $headerFlag; then
            # with headers
            stdin | sed -e '0,/^#fields\t/s///' | grep -v '^#'| xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t'
        else
            # without headers
            stdin | grep -v '^#' | xsv select --no-headers -d $'\t' $commaArgs | xsv fmt -t $'\t'
        fi
    else
        stdin | $zeek_cut -u $spaceArgs
    fi
# ndjson
elif match '^\{.*\}$'; then
    # note: output is tsv
    stdin | json-cut $spaceArgs
    # note: json-cut is several orders of magnitude faster than zq v0.29.0
# generic tsv
elif match '.*	.*'; then
    stdin | xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
    # note: xsv is an order of magnitude faster than miller
    # note: xsv only outputs csv, not tsv; piping to miller after is a slight performance hit, depending on number of columns
# generic csv
elif match '.*,.*'; then
    stdin | xsv select $commaArgs | $conditionalHeader
    # note: xsv is an order of magnitude faster than miller
# unknown; fallback to splitting on whitespace
else
    # trim all leading and trailing whitespace and replace consecutive whitespace with a single tab
    # note: converts output to tsv
    stdin | sed -E -e 's/^[ \t]*//;s/[ \t]*$//' -e 's/[ \t]+/\t/g' | xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
fi

# TODO
# idea: 
# - /dev/shm
# - grep for # lines except fields and types
# - sed to convert to tsv
# - send to xsv
# - sed to convert fields and types back

# output is inconsistent; just convert everything to tsv
# do I actually want to pass zeek headers on to anything?
# zeek tsv -> tsv (or zeek tsv)
# json -> tsv
# tsv -> tsv
# csv -> csv
# whitespace -> csv

# use tsv-utils instead of xsv if benchmark is faster
# benchmark converting to tsv vs using xsv directly

# allow inverting columns with -v

# auto-run tests