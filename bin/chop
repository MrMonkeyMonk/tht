#!/bin/bash

if [ -n "$DEBUG" ]; then set -x; set -e; fi

print_usage() {
    2>&1 cat <<EOF
Usage: $0 [-H|--headers] [<delimiter>] <fields>
  -H|--header             request headers be maintained in the output (default omitted where possible)
  -d|--delimiter <CHR>    custom character to use as a delimiter

  delimiter      must be a single non-alphanum character and the first argument; optional
  fields         can be names, numbers, or ranges; space or comma separated
EOF
}

if [[ $# -eq 0 ]]; then
    print_usage
    exit 0
fi

headerFlag=false
customDelim=
args=()
# Parse through command args to override values
while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
        print_usage
        exit 0
        ;;
    -H|--header|--headers)
        headerFlag=true
        ;;
    -d|--delimiter)
        customDelim="$2"
        shift
        ;;
    *)
        args+=("$1")
        ;;
    esac
    shift
done

# allow specifying a custom delimeter as the first argument
if [[ -z $customDelim ]] && [[ ${#args[0]} -eq 1 ]] && ! [[ ${args[0]} =~ [0-9a-zA-Z] ]]; then
    # if the first argument is a single character and not alphanumeric then assume it is a delimeter
    # if you have columns delimited by numbers or letters then use -d
    customDelim="${args[0]}"
    unset args[0]
fi

# true if the field arguments all look like indexes (not names)
indexArgs=false
if echo "${args[*]}" | grep -q '^[0-9, -]*$'; then
    indexArgs=true
fi

# these are used based on what the underlying tool expects
commaArgs=$(echo "${args[*]}" | tr ' ' ',')
spaceArgs=$(echo "${args[*]}" | tr ',' ' ')

# read the first line in order to detect the type of log
IFS= read -r LINE

# perform regex match on first line
match() {
    [[ $LINE =~ $1 ]]
}

# pass through original stdin to stdout
stdin() {
    (printf "%s\n" "$LINE"; cat)
}

# default to including headers / first row in output
conditionalHeader="cat" # xsv includes headers by default
if ! $headerFlag; then
    # assume the input has a header row if the arguments are field names
    if ! $indexArgs; then
        # only in the case where we're reasonably sure there is a header row
        # and the user did not specify the header flag can we omit the headers
        conditionalHeader="tail -n +2" # omit first row (header)
    fi
fi

# note: all output is converted to tsv

# line empty; cannot continue
if [[ -z $LINE ]]; then
    >&2 echo "No input detected! (make first line is not empty)"
    exit 1
# custom delimiter
elif [[ -n $customDelim ]]; then
    stdin | xsv select -d "$customDelim" $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
# zeek tsv
elif match '^#'; then
    # convert to straight TSV
    stdin | sed -e '0,/^#fields\t/s///' | grep -v '^#' | xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
# ndjson
elif match '^\{.*\}$'; then
    # note: output is tsv
    # note: list fields will be like: ["one", "two", "three"]
    stdin | json-cut $spaceArgs
    # note: json-cut is several orders of magnitude faster than zq v0.29.0
    # note: json-cut doesn't have an option to preserve headers
# tsv
elif match '.*	.*'; then
    stdin | xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
# csv
elif match '.*,.*'; then
    stdin | xsv select $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
# unknown; fallback to splitting on whitespace
else
    # trim all leading and trailing whitespace and replace consecutive whitespace with a single tab
    stdin | sed -E -e 's/^[ \t]*//;s/[ \t]*$//' -e 's/[ \t]+/\t/g' | xsv select -d $'\t' $commaArgs | xsv fmt -t $'\t' | $conditionalHeader
fi

# TODO
# use tsv-utils instead of xsv if benchmark is faster
# tsv-select supports -d
# test jq for json
# allow inverting columns with -v
# parsing a suricata log or syslog will result in output being tab separated
#   maybe have it preserve input, implement tsv script that converts input to tsv, already exists for json
