#!/bin/bash

if [ ! -z "$DEBUG" ]; then set -x; set -e; fi

print_usage() {
    cat << EOF
Filters Zeek logs based on the search terms with output that can be piped to zeek-cut or other tools that can read Zeek logs.

$(basename "$0") [--<logtype>] [OPTIONS] [search_term] [search_term...] [-- [OPTIONS]]

    --<logtype>   is used to search logs of "logtype" (e.g. conn, dns, etc) in the current directory tree (default: conn)

    Specify one or more [search_terms] to filter either STDIN or log files. If you don't specify any search terms, all lines will be printed.
    
    Lines must match all search terms by default.
    -o|--or       at least one search term is required to appear in a line (as opposed to all terms matching)

    Search terms will match on word boundaries by default.
    -s|--starts-with   anchor search term to beginning of field (e.g. 192.168)
    -e|--ends-with     anchor search term to end of field (e.g. google.com)
    -r|--regex         signifies that [search_term(s)] should be treated as regexes
    -v|--invert-match  will invert the matching
    -n|--dry-run       print out the final search command rather than execute it

    -f|--file     file containing newline separated search terms

    $(basename "$0") will pick the best search tool for the situation. Use the following options to force a specific tool.
    --rg          force use of ripgrep
    --ug          force use of ugrep
    --zgrep       force use of zgrep
    --cat         force use of cat (useful for testing)
    --grepcidr    force use of grepcidr

    Any arguments given after -- will be passed to the underlying search command.

Examples:
    $(basename "$0") 10.0.0.1                            conn entries from the current directory tree that match the IP
    $(basename "$0") 10.0.0.1 1.1.1.1                    conn entries from the current directory tree that match the pair of IPs
    $(basename "$0") --or 8.8.8.8 1.1.1.1                conn entries from the current directory tree that match either of IPs
    cat conn.log | $(basename "$0") 10.0.0.1             conn entries from STDIN that match the IP
    $(basename "$0") --dns 'google.com'                  dns entries from the current directory tree that match the domain or any subdomains
    $(basename "$0") --dns --regex '\tgoogle\.com\t'     dns entries from the current directory tree that match the regex

EOF
}

error() {
    >&2 printf "ERROR: %s\n" "$*"
}

exists() {
    command -v "$1" >/dev/null 2>&1
}

isEmpty() {
    # -z return true if unset or set to the empty string
    [ -z "$1" ]
}

isNotEmpty() {
    # -n return true if set to a non-empty string
    [ -n "$1" ]
}

isStdinRedir() {
    # -t returns true if file descriptor (stdin) is a tty,
    # which means it is connected to the terminal;
    # the opposite is if it is redirected or piped
    [ ! -t 0 ]
}

isStdoutRedir() {
    # -t returns true if file descriptor (stdout) is a tty,
    # which means it is connected to the terminal;
    # the opposite is if it is redirected or piped
    [ ! -t 1 ]
}

toRegex() {
    term="$1"
    prefix="$2"
    suffix="$3"
    # escape periods and put in word boundaries
    echo -n "$term" | sed 's/\./\\./g' | xargs -0 -n 1 printf "${prefix}%s${suffix}"
}

# defaults
logType=
search=()
extra_args=()
regex=false
condition="and"
dryRun=false
invert=false
grepCmd=
termPrefix='\\b'
termSuffix='\\b'

# process command args
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_usage
            exit
        ;;
        -s|--starts-with)       termPrefix='[,"\\t]' ;;
        -e|--ends-with)         termSuffix='[,"\\t]' ;;
        -r|--regex)             regex=true ;;
        -o|--or)                condition="or" ;;
        -n|--dry-run)           dryRun=true ;;
        -v|--invert-match)      invert=true ;;
        --rg|--ripgrep)         grepCmd="rg" ;;
        --ug|--ugrep)           grepCmd="ug" ;;
        --zgrep|--grep)         grepCmd="zgrep" ;;
        --cat|--zcat)           grepCmd="cat" ;;
        --cidr|--grepcidr)      grepCmd="grepcidr" 
                                regex=true ;;
        -f|--file)
            shift
            patternfile="$1"
            if [ ! -r "$patternfile" ]; then
                error "Cannot read patternfile '$patternfile'"
            else
                # load all lines from file as search terms
                # https://stackoverflow.com/a/1521498
                while IFS="" read -r pattern || isNotEmpty "$pattern"; do
                    # skip empty lines (we don't want grep's behavior of matching all on an empty line)
                    if isEmpty "$pattern"; then
                        continue
                    fi
                    search+=("$pattern")
                done < "$patternfile"
            fi
        ;;
        --)
            shift
            # pass through args after "--" to search tool
            extra_args+=("$@")
            break
        ;;
        --*)
            # log type e.g. --conn or --dns
            logType="${1#"--"}"
        ;;
        *)
            # the rest of the arguments are search terms
            search+=("$1")
        ;;
    esac
    shift
done

logFiles=
zipFiles=
# default to reading from stdin
files=-
readFromStdin=true
# FILTER_NO_STDIN is a special environment variable that can be set to force disabling reading from stdin (e.g. fzf)
if isNotEmpty "$logType" || ! isStdinRedir || isNotEmpty "$FILTER_NO_STDIN"; then
    readFromStdin=false
    logType=${logType:-conn}
    # note: regex matches entire path, not just filename
    # note: never include conn-summary files and always return a success exit code
    logFiles="$(find . -regextype egrep -iregex ".*/$logType(\b|_).*\.log$" | grep -v conn-summary | sort || true)"
    zipFiles="$(find . -regextype egrep -iregex ".*/$logType(\b|_).*\.log.gz$" | grep -v conn-summary | sort || true)"
    files="$(echo $logFiles $zipFiles | sort)"
    # TODO: test for files/paths with spaces; maybe use -print0; maybe loop through adding each to an array
    
    # if no log files are found then exit
    if isEmpty "$files"; then
        error "Not reading from STDIN and no log files found."
        exit 1
    fi
fi

# pick the best search tool available
if isNotEmpty "$grepCmd"; then
    : # grep command forced via flag
elif [ ${#search[@]} -eq 0 ] && [ ${#extra_args[@]} -eq 0 ]; then
    # use cat if there are no search terms and no extra arguments
    grepCmd="cat"
elif exists ug; then
    grepCmd="ug"
elif exists rg; then
    grepCmd="rg"
elif exists zgrep; then
    grepCmd="zgrep"
fi

if ! exists "$grepCmd"; then
    error "Could not find a grep program."
    exit 2
fi

invert_flag=""
header_flag="-e '^#'"
if $invert; then
    # note: use -v instead of --invert-match for grepcidr compatibility
    invert_flag="-v"
    header_flag=""
fi

# TODO: Test if you can have too many files passed in. Might have to pipe from find directly.
filterCmd=""
isFirstSearch=true
parallel="xargs -n 1 -P $(nproc)"
# loop through all search terms
for term in "${search[@]}"; do 
    # if regex flag was not given then escape the search term
    if ! $regex; then
        term="$(toRegex "$term" "$termPrefix" "$termSuffix")"
    fi
    case $grepCmd in
    rg)
        # special case the first search term
        if $isFirstSearch; then
            # disable unicode to avoid taking a speed hit
            # https://github.com/BurntSushi/ripgrep/issues/1860
            # https://github.com/BurntSushi/ripgrep/issues/1760
            filterCmd="rg ${extra_args[@]} --no-filename --no-line-number --no-unicode --search-zip $invert_flag $header_flag -e '$term' $files"
            isFirstSearch=false
        else
            if [ "$condition" = "and" ]; then      # prefer and
                filterCmd="$filterCmd | rg ${extra_args[@]} $invert_flag $header_flag -e '$term'"
            elif [ "$condition" = "or" ]; then
                filterCmd="$filterCmd -e '$term'"
            fi
        fi
    ;;
    ug)
        # ugrep --bool needs special treatment of spaces
        term="$(printf "%s" "$term" | sed 's/ /\\x20/g')"
        # special case the first search term
        if $isFirstSearch; then
            filterCmd="ug ${extra_args[@]} --no-filename --decompress $invert_flag --bool '${header_flag:+^# OR }($term"
            isFirstSearch=false
        else
            if [ "$condition" = "and" ]; then
                filterCmd="$filterCmd AND $term"
            elif [ "$condition" = "or" ]; then
                filterCmd="$filterCmd OR $term"
            fi
        fi
    ;;
    zgrep)
        # special case the first search term
        if $isFirstSearch; then
            # use xargs to parallelize zgrep
            #TODO test for race conditions like you get with xargs zcat
            filterCmd="echo $files | $parallel zgrep ${extra_args[@]} $invert_flag $header_flag -e '$term'"
            isFirstSearch=false
        else
            if [ "$condition" = "and" ]; then
                filterCmd="$filterCmd | zgrep ${extra_args[@]} $invert_flag $header_flag -e '$term'"
            elif [ "$condition" = "or" ]; then
                filterCmd="$filterCmd -e '$term'"
            fi
        fi
    ;;
    grepcidr)
        # TODO preserve zeek headers; grepcidr doesn't keep comments
        # idea: use sed to condense all leading # lines into one, 
        # use tail -n +1 for every stage,
        # use sed at the end to expand line back out
        # idea: use mktemp to create temporary file for the headers,
        # use tee >(head -100 > tmp) # not likely to work,
        # prepend grep -e '^#' tmp; to the filterCmd

        # special case the first search term
        if $isFirstSearch; then
            # if data comes from stdin, then just run grepcidr
            if $readFromStdin; then
                filterCmd=""
            # if data comes from only zip files, then zcat and pipe to grepcidr
            elif isNotEmpty "$zipFiles" && isEmpty "$logFiles"; then
                # note: grepcidr strips headers so interleaving logs with xargs is ok
                filterCmd="echo $zipFiles | $parallel zcat |"
            # if data comes from both zip files and log files, then cat them both to grepcidr
            elif isNotEmpty "$zipFiles" && isNotEmpty "$logFiles"; then
                # note: grepcidr strips headers so interleaving logs with xargs is ok
                # note: there's no parallel speed increase for cat since it's not CPU-bound
                filterCmd="( echo $zipFiles | $parallel zcat; cat $logFiles ) |"
            # if data only comes from log files, then we can parallelize grepcidr
            elif isEmpty "$zipFiles" && isNotEmpty "$logFiles"; then
                filterCmd="echo $logFiles | $parallel"
            fi
            filterCmd="$filterCmd grepcidr ${extra_args[@]} $invert_flag -e '$term'"
            isFirstSearch=false
        else
            if [ "$condition" = "and" ]; then
                filterCmd="$filterCmd | grepcidr ${extra_args[@]} $invert_flag -e '$term'"
            elif [ "$condition" = "or" ]; then
                filterCmd="$filterCmd -e '$term'"
            fi
        fi
    ;;
    esac
done
# special case after search terms when needed
case $grepCmd in
    ug)
        if ! $isFirstSearch; then
            filterCmd="$filterCmd)' $files"
        fi
    ;;
    cat)
        # only run respective commands if there are actual files that match
        filterCmd=
        if isEmpty "$logFiles" && isEmpty "$zipFiles"; then
            # no files match; simply send data through from stdin
            filterCmd="cat"
        else
            if isNotEmpty "$logFiles"; then
                filterCmd="cat $logFiles;"
            fi
            if isNotEmpty "$zipFiles"; then
                filterCmd="$filterCmd zcat $zipFiles"
            fi
        fi
        # note: xargs causes race conditions with line output; 
        # don't use in parallel because we want to preserve heading order
    ;;
esac

# if stdout is not redirected, get rid of zeek headers
if ! isStdoutRedir; then
    # only do this if printing to stdout to avoid a performance hit anywhere else
    # printing to stdout implies user expects few results
    filterCmd="$filterCmd | grep -v '^#'"
fi

if $dryRun; then
    printf "%s\n" "$filterCmd"
else
    eval $filterCmd
fi


# TODO
# Specify multiple types of logs? e.g.
# filter --http --ssl --dns google.com
# Wouldn't really be useful for zeek-cut. But would be useful for jq and JSON logs.

# write some unit tests

# make a way to select files to search. maybe with fuzzy finder.
# --files
#
# --rfc1918 or maybe --preset|-p rfc1918
# auto-add --starts-with so don't do anything when that is used.
# \w(10\.[0-9]{1,3}|172\.1[6-9]|172\.2[0-9]|172\.3[0-1]|192\.168)\.[0-9]{1,3}\.[0-9]{1,3}\w
# Other useful presets? IPv6? Look in rita for ideas.
# Multicast, link-local 169.254.
# \w169\.254\.[0-9]{1,3}\.[0-9]{1,3}\w
# local_orig & local_resp
# ipv4, ipv6, possibly with -o to extract IPs from files
# ipv4cidr, ipv6cidr
# look at pre-existing groks

# --csv|--header|--keep-lines=1 to pass through header line for csv/tsv logs
# without ^# to search for this gets back into the original problem
# could have sed prepend #, grep to include # and then sed to remove it again at the end

# use \Q and \E instead of escaping periods
# grep -P, rg -P, ug, or ug -P support this